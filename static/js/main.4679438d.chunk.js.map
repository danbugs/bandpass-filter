{"version":3,"sources":["components/GoodBandPassComponent.js","components/BadBandPassComponent.js","App.js","serviceWorker.js","index.js"],"names":["sketch","p","sound","sound1","fft","filter","noise","inputCutOffFrequency","inputResonanceFrequency","filterFreq","filterRes","isAllPass","toggleNoise","started","stop","start","toggleSound","isPlaying","pause","play","submitCutOff","cutOff","parseInt","value","submitResonance","resonance","removeFilter","setType","preload","loadSound","setup","colorMode","HSB","createCanvas","loop","p5","BandPass","Noise","disconnect","connect","process","FFT","createButton","mouseClicked","createDiv","createInput","draw","set","background","spectrum","analyze","noStroke","i","length","x","map","log","width","h","height","rectangle_width","fill","rect","myCustomRedrawAccordingToNewPropsHandler","props","renderingFilter2","remove","sketch2","canvasPlaying","noise2","sound2","fft2","filterPresence","playOrPauseCanvas","toggleFilter","noLoop","cos","PI","hannWindow","x2","h2","stroke","line","text","counter","RenderFilter","this","react_default","a","createElement","P5Wrapper_default","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","ToggleFilters","bind","assertThisInitialized","e","setState","window","location","reload","_this2","reactstrap_es","style","textAlign","margin","md","App_RenderFilter","top","src","alt","onClick","color","className","aria-hidden","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4679438d.chunk.js","sourcesContent":["import \"p5/lib/addons/p5.sound\";\nimport \"p5/lib/addons/p5.dom\";\nimport p5 from \"p5\";\n\nexport default function sketch (p) {\n    var sound;\n    var sound1;\n    var fft;\n    var filter;\n    var noise;\n    var filterFreq = 300;\n    var filterRes = 10;\n    var inputCutOffFrequency;\n    var inputResonanceFrequency;\n    var isAllPass = false;\n\n    p.preload = function () {\n        sound1 = p.loadSound('./myRecording.mp3');\n        sound = sound1;\n    }\n  \n    p.setup = function () {\n        p.colorMode(p.HSB);\n        p.createCanvas(512, 512);\n\n        sound.loop();\n\n        filter = new p5.BandPass();\n        noise = new p5.Noise();\n\n        sound.disconnect();\n        sound.connect(filter);\n\n        noise.disconnect();\n        filter.process(noise);\n        noise.start();\n\n        fft = new p5.FFT(.9, 512);\n        var buttonToggleSound = p.createButton('Toggle Sound');\n        buttonToggleSound.mouseClicked(toggleSound);\n        var buttonToggleNoise = p.createButton('Toggle Noise');\n        buttonToggleNoise.mouseClicked(toggleNoise);\n        var buttonDispose = p.createButton('Toggle Filter');\n        buttonDispose.mouseClicked(removeFilter);\n      \n        p.createDiv('Set Cut Off Frequency: (default: 300Hz)');\n        inputCutOffFrequency = p.createInput();\n        var buttonSubmit = p.createButton('Cut off!');\n        buttonSubmit.mouseClicked(submitCutOff);\n      \n        p.createDiv('Set Resonance: (default: 10)');\n        inputResonanceFrequency = p.createInput();\n        var buttonSubmit2 = p.createButton('Resonate!');\n        buttonSubmit2.mouseClicked(submitResonance);\n      }\n      \n      function toggleNoise() {\n        if (noise.started) {\n          noise.stop();\n        } else {\n          noise.start();\n        }\n      }\n      function toggleSound() {\n        if (sound.isPlaying()) {\n          sound.pause();\n        } else {\n          sound.play();\n        }\n      }\n      \n      function submitCutOff() {\n        var cutOff = parseInt(inputCutOffFrequency.value());\n        filterFreq = cutOff;\n      }\n      \n      function submitResonance() {\n        var resonance = parseInt(inputResonanceFrequency.value());\n        filterRes = resonance;\n      }\n      \n      function removeFilter() {\n        if(!isAllPass)\n        {\n          filter.setType('allpass');\n          isAllPass = true;\n        }\n        else{\n          filter.setType('bandpass');\n          isAllPass = false;\n        }\n      }\n  \n    p.draw = function () {\n        filter.set(filterFreq, filterRes);\n        p.background(0);\n        var spectrum = fft.analyze();\n        p.noStroke();\n        for(var i = 0; i < spectrum.length; i++)\n        {\n          var x = p.map(p.log(i), 0, p.log(spectrum.length), 0, p.width);\n          var h = p.map(spectrum[i], 0, 255, 0, p.height);\n          var rectangle_width = (p.log(i+1)-p.log(i))*(p.width/p.log(spectrum.length));\n          p.fill(i, 255, 255)\n          p.rect(x, p.height, rectangle_width, -h )\n        }\n    };\n\n    var renderingFilter2 = false;\n\n    p.myCustomRedrawAccordingToNewPropsHandler = function (props) {\n        if (props.renderingFilter2){\n          p.remove();\n        }\n    };\n  };","import \"p5/lib/addons/p5.sound\";\nimport \"p5/lib/addons/p5.dom\";\nimport p5 from \"p5\";\n\nexport default function sketch2 (p) {\n            var canvasPlaying;\n            var filterPresence = true;\n            var noise2;\n            var sound2;\n            var spectrum = [];\n            var fft2;\n            p.preload = function () {\n                sound2 = p.loadSound('tuningFork.wav');\n            }\n            p.setup = function () {\n                var cnv = p.createCanvas(512,512);\n                canvasPlaying = true;\n              \n                sound2.loop();\n              \n                fft2 = new p5.FFT(.9, 128);\n                noise2 = new p5.Noise('white');\n                noise2.start();\n                noise2.connect(fft2);\n                sound2.connect();\n              \n                var playPauseButton = p.createButton('Play/Pause - Hann');\n                playPauseButton.mouseClicked(playOrPauseCanvas);\n              \n                var toggleFilterButton = p.createButton('Toggle Filter - Hann');\n                toggleFilterButton.mouseClicked(toggleFilter);\n            }\n              \n            const playOrPauseCanvas = () =>\n            {\n                if(canvasPlaying)\n                {\n                  p.noLoop();\n                  sound2.pause();\n                  noise2.stop();\n                  canvasPlaying = false;\n                }\n                else\n                {\n                  p.loop();\n                  sound2.play();\n                  noise2.start();\n                  canvasPlaying = true;\n                }\n            }\n            \n            const toggleFilter = () =>\n            {\n              filterPresence = !filterPresence;\n            }\n            \n            const hannWindow = () =>\n            {\n              for(var i = 0; i<spectrum[i]; i++)\n              {\n                spectrum[i] = spectrum[i]*1/2*(p.cos((2*p.PI*i)/(spectrum.length-1)));\n                if(i > 50) // eliminating meaningless frequencies\n                {\n                  spectrum[i] = 0;\n                }\n              }\n            }\n          \n            p.draw = function () {\n                p.background(0);\n                p.noStroke();\n                spectrum = fft2.analyze();\n              \n                if(filterPresence)\n                {\n                  hannWindow();\n                }\n              \n                //draw the spectrum\n                for (var i = 0; i< spectrum.length; i++){\n                  p.fill(255,i,255);\n                  var x2 = p.map(i, 0, spectrum.length, p.width/2, p.width);\n                  var h2 = p.map(spectrum[i], 0, 255, 0, p.height);\n                  var rectangle_width = (p.width/spectrum.length);\n                  p.rect(x2, p.height, rectangle_width, -h2);\n                }\n                p.stroke(255);\n                p.line(p.width/2, p.height, p.width/2, 100);\n                p.line(p.width/2-4, 104, p.width/2, 100);\n                p.line(p.width/2+4, 104, p.width/2, 100);\n                p.fill(255);\n                p.text(\"Acausal side\", p.width/2-100, p.height/2);\n                p.text(\"BandPass Filter with Hann \\n Window \\n ~ Danilo Chiarlone\", 10, 50);\n            }\n\n\n            var renderingFilter2 = false;\n\n            p.myCustomRedrawAccordingToNewPropsHandler = function (props) {\n                if (!props.renderingFilter2){\n                  p.remove();\n                }\n            };\n};","import React, { Component } from 'react';\nimport './App.css';\nimport P5Wrapper from 'react-p5-wrapper';\nimport sketch from \"./components/GoodBandPassComponent\";\nimport sketch2 from\"./components/BadBandPassComponent\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport {Container, Row, Col, Button, Jumbotron, Card, CardImg, CardBody, CardTitle, CardText} from \"reactstrap\"\n\nvar counter = 1;\n\nclass RenderFilter extends Component\n{\n  render()\n    {\n    const renderingFilter2 = this.props.renderingFilter2\n    if(renderingFilter2)\n    {\n      return(\n        <P5Wrapper sketch={sketch2} renderingFilter2={this.props.renderingFilter2}/>\n      )\n    }\n    else \n    {\n      return(\n        <P5Wrapper sketch={sketch} renderingFilter2={this.props.renderingFilter2}/>\n      )\n    }\n  }\n}\n\nclass App extends Component{\n\n  constructor(props)\n  {\n    super(props);\n\n    this.state = {\n      renderingFilter2: true\n    }\n\n    this.ToggleFilters = this.ToggleFilters.bind(this);\n  }\n\nToggleFilters(e)\n{\n  this.setState({renderingFilter2: !this.state.renderingFilter2});\n  if(counter%2===0)\n  {\n    window.location.reload();\n  }\n  counter++;\n}\n\trender () {\n\t\treturn (\n        <Container>\n          <div><br></br></div>\n          <h1 style={{\"textAlign\": \"center\",\n            \"margin\" : \"0 0 50px 0\"}}\n            >Digital Signal Processing (ENGR362) Project 2018</h1>\n          <Row>\n            <Col md={6}>\n              <Card>\n                <CardTitle>\n                  Bandpass Filter\n                  <hr></hr>\n                  </CardTitle>\n                <CardBody>\n                  <RenderFilter renderingFilter2={this.state.renderingFilter2}/>\n                </CardBody>\n              </Card>\n            </Col>\n            <Col md={5}>\n              <Card>\n                <CardImg top width=\"100%\" src=\"./362img1.png\" alt=\"Card image cap\" />\n                <CardBody>\n                  <CardTitle>DFT Plot of Frequency</CardTitle>\n                  <CardText>We can see that the fundamental frequency of the signal is around 500Hz, \n                    this is really close to the actual frequency of my tuning fork 493.9Hz.\n                    Go ahead and try adjusting the filter to that frequency.</CardText>\n                </CardBody>\n              </Card>\n              <Button onClick={() => this.ToggleFilters()}>Change Filter</Button>\n            </Col>\n          </Row>\n          <Row>\n              <footer>\n                <Jumbotron>\n                  Developed with <i style={{color: \"red\"}} className=\"fa fa-heart\" aria-hidden=\"true\"></i> by Danilo Chiarlone\n                </Jumbotron>\n              </footer>\n          </Row>\n        </Container>\n\t\t);\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}